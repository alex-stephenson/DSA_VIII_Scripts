# #convert select_one to character
########################################################
########### STEP 3 -- CLEAN THE DATA ###################
########################################################
## Check 1: survey time taken
df <- time_check(df, time_min = mindur, time_max = maxdur)
gis_data <- df %>%
filter(interview_duration>=30 & consent=="yes") %>%
select(uuid,start,end,audit,today,enum_name,localisation_region_label,
ki_contact,district_name,idp_code,IDP_Site,contains("gps"),more_info)
gis_master <- readxl::read_excel("gis/gis_master_DSA_VII.xlsx")
check_consent <- df %>%
filter(consent == "no") %>%
issue_log(question = "consent", issue = "consent declined", action = "d")
## Check 6: ki age
ki_age_check <- df %>%
filter(ki_age=="90_above") %>%
issue_log(question = "ki_age",
issue = "ki age is greeter than 90 years, please confirm", action = "f")
View(ki_age_check)
## Check 6: ki age
ki_age_check <- df %>%
filter(ki_age=="90_above") %>%
issue_log(question = "ki_age",
issue = "ki age is greeter than 90 years, please confirm", action = "f")
## Check 11: ki age and role
ki_age_check_role <- df %>%
filter((ki_age=="30_49" | ki_age=="18_29") & ki_role=="elder") %>%
issue_log(question = "ki_age",
issue = "ki age is is less than 50 and his role is an elder", action = "f")
check_site_duration <-df %>%
filter((duration_site_established_in_months < 4 & cccm_idps_arrival=="morethansixmonths" | cccm_idps_arrival=="fourtosixmonths")|
(duration_site_established_in_months < 2 & cccm_idps_arrival=="morethansixmonths" | cccm_idps_arrival=="fourtosixmonths"|cccm_idps_arrival=="onetothreemonths")|
(duration_site_established_in_months < 6 & cccm_idps_arrival=="morethansixmonths")) %>%
issue_log(question = "cccm_idps_arrival",
issue = "IDPs arrived in this camp way before it was established, please check", action = "f")
## Check 7: ki_role inconsistency
ki_role_check <- df %>%
filter(ki_role %in% c("gatekeeper", "camp_leader", "site_manager") & camp_structure == "no") %>%
issue_log(question = "camp_structure",
issue = "ki has already identifed him/here selft as site manager or gatekeeper, but again reporting no camp structure exist, please confirm",
action = "c")
## Check 8: ki resident
ki_resident_check <- df %>%
filter(ki_role == "site_resident" & ki_resident == "no") %>%
issue_log(question = "ki_resident",
issue = "ki reported in the role as site resident and again reported the ki_resident quesiton as no, please confirm",
action = "c")
## Check 9: Population Checks
cccm_shelters <- df %>%
filter(cccm_populationestimates_shelters < 50) %>%
issue_log(question = "cccm_populationestimates_shelters",
issue = "the number shelters in the camp are less then 50, please confirm with enumerator",
action = "c")
###########families
cccm_families <- df %>%
filter(cccm_populationestimates_families < 100) %>%
issue_log(question = "cccm_populationestimates_families",
issue = "the number of families in the camp are less than 100, please confirm with enumeator",
action = "c")
###########individuals
cccm_individuals <- df %>%
filter(cccm_populationestimates_individuals < 150) %>%
issue_log(question = "cccm_populationestimates_individuals",
issue = "the number of individuals in the camp are less than 150, please confirm with enumerator",
action = "c")
## Check 3: IDP coverage#########################################################################################################
n_occur <- data.frame(table(df$idp_code))
n_occur <- n_occur[n_occur$Freq > 4,]
over_sampling <- df[df$idp_code %in% n_occur$Var1[n_occur$Freq > 4],] %>%
issue_log(question = "idp_code", issue = "idp site interviewed more than 4 times", action = "f")
## Check 4:DUPLICATED Ki role per site
f<-as.data.frame(df %>%
group_by(idp_code,ki_role) %>%
dplyr::summarise(n=n()) %>%
filter(n > 1))
over_sampling1 <- df %>%
filter(idp_code %in% f$idp_code) %>%
issue_log(question = "ki_role", issue = "you have interviewed more than 1 Ki_role in one site,verify", action = "f")
## Check 5: Other options
other_options <- df %>%
dplyr::select(ends_with("_other"), "localisation_region_label", "district_name", "today","enum_name", "uuid", "ki_contact") %>%
pivot_longer(ends_with("_other"),
names_to = "question",
values_to = "old_value") %>%
filter(!is.na(old_value)) %>%
mutate(issue = "please translate other options and recode them in the respective choice if possible",
new_value = "",
Reason = "",
action = "c") %>%
select("uuid", "localisation_region_label", "district_name", "today", "enum_name","question", "issue",
"old_value", "new_value","Reason", "ki_contact","action")
other_options <- other_options %>%
rename(
enumerator = enum_name,
region = localisation_region_label,
district = district_name
)
?rename
other_options %>%
rename(
enumerator = enum_name,
region = localisation_region_label,
district = district_name
)
other_options$enum_name
View(questions)
View(other_options)
rename(other_options, enumerator = "enum_name")
other_options <- other_options %>%
rename(
enumerator = "enum_name",
region = "localisation_region_label",
district = "district_name"
)
other_options <- ,
other_options %>%
rename(
enumerator = "enum_name")
other_options %>%
dplyr::rename(
enumerator = "enum_name")
other_options <- other_options %>%
dplyr::rename(
enumerator = "enum_name",
region = "localisation_region_label",
district = "district_name"
)
l4 <- questions %>%
filter(grepl("(numerical|integer)",type)) %>%
pull(name)
l4 <- l4[which(l4 %in% colnames(df))]
l4 <- l4[l4 %!in% c("referral_phone" )]
df <- df %>%
dplyr::rename(
enumerator = enum_name,
region = localisation_region_label,
district = district_name
)
colnames(df)
# detect outliers
outliers.sub1 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-linear", n.sd=3)
other_options <- other_options %>%
dplyr::rename(
enumerator = "enum_name",
region = "localisation_region_label"
#   district = "district_name"
)
df <- df %>%
rename(
enumerator = enum_name,
region = localisation_region_label
#    district = district_name
)
df <- df %>%
dplyr::rename(
enumerator = enum_name,
region = localisation_region_label
#    district = district_name
)
# detect outliers
outliers.sub1 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-linear", n.sd=3)
df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-linear", n.sd=3)
df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-log", n.sd=3)
View(df)
rm(list = ls())
today <- Sys.Date()
if (!require("pacman")) install.packages("pacman")
if (!require("robotoolbox")) remotes::install_gitlab("dickoa/robotoolbox")
p_load(rio,
tidyverse,
koboquest,
hypegrammaR,
sjmisc,
keyring)
# load packages
library(openxlsx)
library(rpivotTable)
library(cleaninginspectoR)
library(koboAPI)
library(openxlsx)
library(readxl)
library(kableExtra)
library(plyr)
library(cleaningtools)
library(robotoolbox)
## Hard code values
consent <- "consent"
uuid <- "uuid"
mindur <- 30
maxdur <- 60
access_from_server <- FALSE
###################################################
###### STEP 2 - IMPORT DATA AND FUNCTIONS #########
###################################################
user_login <- Sys.info()[["user"]]
source("functions/cleaning_functions.R")
if (access_from_server == TRUE) {
source(sprintf(r"(C:\Users\%s\ACTED\IMPACT SOM - 02_Research\01_REACH\Data Team\02_Functions\access_kobo_api.r)", user_login))
kobo_data <- get_kobo_data(asset_id = "a38DR4AhAH2rDqP6e5YHLm")
print("Kobo data successfully accessed from server")
} else {
df <- readxl::read_excel(r"(input/SOM2204_CCCM_DSA_July.xlsx)") ###### remove this once no longer required ###############
district_file <- read.csv("input/idp_list.csv")
koboToolPath = "input/tool/REACH_2023_SOM_DSA_Survey_Tool.xlsx"
questions = import(koboToolPath,sheet="survey") %>%
filter(!is.na(name))
choices = import(koboToolPath,sheet="choices")
}
#############load datasets ##################
## example date "2023-10-08T07:56:32"
date_to_filter = readline("select the date to filter for in YYYY-MM_DD format: ")
df <- df %>%
left_join(district_file, by = c("idp_code")) %>%
mutate(submission_date = format(ymd_hms(`_submission_time`), "%Y-%m-%d")) %>%
filter(submission_date == date_to_filter)
## add if statement saying error if df empty
tool.survey<- questions%>%
filter(name%in%colnames(df))
####### CONVERT COLUMNS TO REQUIRED DATA TYPE  #####
cols.integer <- tool.survey %>%
filter(type == "integer") %>%
pull(name)
cols.gps <- tool.survey %>%
filter(type == "gps") %>%
pull(name)
cols.characters_one <- tool.survey %>%
filter(str_detect(type, "select_one")) %>%
pull(name)
cols.characters_multiple <- tool.survey %>%
filter(str_detect(type, "select_multiple")) %>%
pull(name)
df <- mutate_at(df, cols.gps, as.integer)
df <- mutate_at(df, cols.integer, as.integer)
df <- mutate_at(df, cols.characters_one, as.character)
df <- mutate_at(df, cols.characters_multiple, as.character)
#######
# cols.integer <- filter(tool.survey, type=="calculate")$name
# df <- mutate_at(df, cols.integer, as.integer)
#
# #convert select_one to character
########################################################
########### STEP 3 -- CLEAN THE DATA ###################
########################################################
## Check 1: survey time taken
df <- time_check(df, time_min = mindur, time_max = maxdur)
user_login <- Sys.info()[["user"]]
source("functions/cleaning_functions.R")
if (access_from_server == TRUE) {
source(sprintf(r"(C:\Users\%s\ACTED\IMPACT SOM - 02_Research\01_REACH\Data Team\02_Functions\access_kobo_api.r)", user_login))
kobo_data <- get_kobo_data(asset_id = "a38DR4AhAH2rDqP6e5YHLm")
print("Kobo data successfully accessed from server")
} else {
df <- readxl::read_excel(r"(input/SOM2204_CCCM_DSA_July.xlsx)") ###### remove this once no longer required ###############
district_file <- read.csv("input/idp_list.csv")
koboToolPath = "input/tool/REACH_2023_SOM_DSA_Survey_Tool.xlsx"
questions = import(koboToolPath,sheet="survey") %>%
filter(!is.na(name))
choices = import(koboToolPath,sheet="choices")
}
date_to_filter = readline("select the date to filter for in YYYY-MM_DD format: ")
df <- df %>%
left_join(district_file, by = c("idp_code")) %>%
mutate(submission_date = format(ymd_hms(`_submission_time`), "%Y-%m-%d")) %>%
filter(submission_date == date_to_filter)
tool.survey<- questions%>%
filter(name%in%colnames(df))
cols.integer <- tool.survey %>%
filter(type == "integer") %>%
pull(name)
cols.gps <- tool.survey %>%
filter(type == "gps") %>%
pull(name)
cols.characters_one <- tool.survey %>%
filter(str_detect(type, "select_one")) %>%
pull(name)
cols.characters_multiple <- tool.survey %>%
filter(str_detect(type, "select_multiple")) %>%
pull(name)
df <- mutate_at(df, cols.gps, as.integer)
df <- mutate_at(df, cols.integer, as.integer)
df <- mutate_at(df, cols.characters_one, as.character)
df <- mutate_at(df, cols.characters_multiple, as.character)
#######
# cols.integer <- filter(tool.survey, type=="calculate")$name
# df <- mutate_at(df, cols.integer, as.integer)
#
# #convert select_one to character
########################################################
########### STEP 3 -- CLEAN THE DATA ###################
########################################################
## Check 1: survey time taken
df <- time_check(df, time_min = mindur, time_max = maxdur)
gis_data <- df %>%
filter(interview_duration>=30 & consent=="yes") %>%
select(uuid,start,end,audit,today,enum_name,localisation_region_label,
ki_contact,district_name,idp_code,IDP_Site,contains("gps"),more_info)
gis_master <- readxl::read_excel("gis/gis_master_DSA_VII.xlsx")
# data checks
# declined consent
check_consent <- df %>%
filter(consent == "no") %>%
issue_log(question = "consent", issue = "consent declined", action = "d")
## Check 6: ki age
ki_age_check <- df %>%
filter(ki_age=="90_above") %>%
issue_log(question = "ki_age",
issue = "ki age is greeter than 90 years, please confirm", action = "f")
## Check 11: ki age and role
ki_age_check_role <- df %>%
filter((ki_age=="30_49" | ki_age=="18_29") & ki_role=="elder") %>%
issue_log(question = "ki_age",
issue = "ki age is is less than 50 and his role is an elder", action = "f")
check_site_duration <-df %>%
filter((duration_site_established_in_months < 4 & cccm_idps_arrival=="morethansixmonths" | cccm_idps_arrival=="fourtosixmonths")|
(duration_site_established_in_months < 2 & cccm_idps_arrival=="morethansixmonths" | cccm_idps_arrival=="fourtosixmonths"|cccm_idps_arrival=="onetothreemonths")|
(duration_site_established_in_months < 6 & cccm_idps_arrival=="morethansixmonths")) %>%
issue_log(question = "cccm_idps_arrival",
issue = "IDPs arrived in this camp way before it was established, please check", action = "f")
## Check 7: ki_role inconsistency
ki_role_check <- df %>%
filter(ki_role %in% c("gatekeeper", "camp_leader", "site_manager") & camp_structure == "no") %>%
issue_log(question = "camp_structure",
issue = "ki has already identifed him/here selft as site manager or gatekeeper, but again reporting no camp structure exist, please confirm",
action = "c")
## Check 8: ki resident
ki_resident_check <- df %>%
filter(ki_role == "site_resident" & ki_resident == "no") %>%
issue_log(question = "ki_resident",
issue = "ki reported in the role as site resident and again reported the ki_resident quesiton as no, please confirm",
action = "c")
## Check 9: Population Checks
cccm_shelters <- df %>%
filter(cccm_populationestimates_shelters < 50) %>%
issue_log(question = "cccm_populationestimates_shelters",
issue = "the number shelters in the camp are less then 50, please confirm with enumerator",
action = "c")
###########families
cccm_families <- df %>%
filter(cccm_populationestimates_families < 100) %>%
issue_log(question = "cccm_populationestimates_families",
issue = "the number of families in the camp are less than 100, please confirm with enumeator",
action = "c")
###########individuals
cccm_individuals <- df %>%
filter(cccm_populationestimates_individuals < 150) %>%
issue_log(question = "cccm_populationestimates_individuals",
issue = "the number of individuals in the camp are less than 150, please confirm with enumerator",
action = "c")
## Check 3: IDP coverage#########################################################################################################
n_occur <- data.frame(table(df$idp_code))
n_occur <- n_occur[n_occur$Freq > 4,]
over_sampling <- df[df$idp_code %in% n_occur$Var1[n_occur$Freq > 4],] %>%
issue_log(question = "idp_code", issue = "idp site interviewed more than 4 times", action = "f")
## Check 4:DUPLICATED Ki role per site
f<-as.data.frame(df %>%
group_by(idp_code,ki_role) %>%
dplyr::summarise(n=n()) %>%
filter(n > 1))
over_sampling1 <- df %>%
filter(idp_code %in% f$idp_code) %>%
issue_log(question = "ki_role", issue = "you have interviewed more than 1 Ki_role in one site,verify", action = "f")
## Check 5: Other options
other_options <- df %>%
dplyr::select(ends_with("_other"), "localisation_region_label", "district_name", "today","enum_name", "uuid", "ki_contact") %>%
pivot_longer(ends_with("_other"),
names_to = "question",
values_to = "old_value") %>%
filter(!is.na(old_value)) %>%
mutate(issue = "please translate other options and recode them in the respective choice if possible",
new_value = "",
Reason = "",
action = "c") %>%
select("uuid", "localisation_region_label", "district_name", "today", "enum_name","question", "issue",
"old_value", "new_value","Reason", "ki_contact","action")
# # renaming column heads to merge with the clogs
other_options <- other_options %>%
dplyr::rename(
enumerator = "enum_name",
region = "localisation_region_label",
district = "district_name"
)
##Remove setllment other
l4 <- questions %>%
filter(grepl("(numerical|integer)",type)) %>%
pull(name)
l4 <- l4[which(l4 %in% colnames(df))]
l4 <- l4[l4 %!in% c("referral_phone" )]
#Outliers
df <- df %>%
dplyr::rename(
enumerator = enum_name,
region = localisation_region_label
#    district = district_name
)
# detect outliers
outliers.sub1 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-linear", n.sd=3)
outliers.sub2 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="sd-log", n.sd=3)
outliers.sub3 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="iqr-linear")
outliers.sub4 <- df %>%
select("uuid", "region","district","today","enumerator","ki_contact", all_of(l4)) %>%
detect.outliers(., method="iqr-log")
outliers <- rbind(outliers.sub1, outliers.sub2, outliers.sub3, outliers.sub4)
outliers <- outliers %>%
mutate(mid=paste0(uuid, issue))
outliers <- outliers[!duplicated(outliers$mid),] %>%
select(-mid)
outliers <- outliers[!(row.names(outliers) %in% c("enumerator")),]
outliers <- outliers %>%
filter(question !="enumerator")
cleaning_log <- rbind(check_consent,less_time_surveys,long_time_surveys,duplicated_surveys, duplicated_res,other_options,outliers,ki_age_check,ki_role_check,
ki_resident_check,cccm_shelters,cccm_families,cccm_individuals,over_sampling1,over_sampling,ki_age_check_role,check_site_duration)
gis_data  <- filter(gis_data, uuid %!in% gis_master$uuid)
gis_master <- rbind(gis_data,gis_master)
gis_master <- gis_master [!duplicated(gis_master$uuid),]
View(gis_master)
fo_base_assingment_str <- sprintf(r"(C:\Users\%s\ACTED\IMPACT SOM - 02_Research\01_REACH\2024_25\01_ISU\SOM1901_HSM\02_Data Collection & Processing\_FO_assignments_and_locations/fo_base_assignment_260224.xlsx)", user_login)
fo_base_assingment_str
#referall$district_name<-tolower(gsub(" ","_",referall$district_name))
# read in the FO/district mapping(we create fo_assigned location when we receive and update )
fo_district_mapping <- read_excel(fo_base_assingment_str) %>%
select(district_for_code, fo_in_charge_for_code) %>%
dplyr::rename("district" = "district_for_code") %>%
mutate_all(tolower)
fo_district_mapping
#each KI will be asked if they have other potential contacts for the DSA, those are grouped by FO similar to the clogs
contact_data_by_fo <- group_by_fo %>%
dplyr::group_split() %>%
purrr::map(~ filter(., referral_yn == "yes") %>%
select(fo_in_charge_for_code, enum_base, district, settlement, ki_name, ki_phone_number, referral_name, referral_phone, referral_second) %>%
dplyr::rename(base = enum_base,
referrer_name = ki_name,
referrer_number = ki_phone_number,
contact_name = referral_name,
contact_number_1 = referral_phone,
contact_number_2 = referral_second
)
)
referall <-  df[!(is.na(df$referral_phone) | df$referral_phone==""),] %>% select(localisation_region_label,district_name,idp_code, IDP_Site, referral_name,referral_phone,referral_person,uuid)
group_by_fo
group_by_fo <- df %>%
dplyr::group_by(fo_in_charge_for_code)
group_by_fo <- fo_district_mapping %>%
dplyr::group_by(fo_in_charge_for_code)
contact_data_by_fo <- group_by_fo %>%
dplyr::group_split() %>%
purrr::map(~ filter(., referral_yn == "yes") %>%
select(fo_in_charge_for_code, enum_base, district, settlement, ki_name, ki_phone_number, referral_name, referral_phone, referral_second) %>%
dplyr::rename(base = enum_base,
referrer_name = ki_name,
referrer_number = ki_phone_number,
contact_name = referral_name,
contact_number_1 = referral_phone,
contact_number_2 = referral_second
)
)
View(group_by_fo)
df$referral_yb
df$referral_yn
referall <-  df[!(is.na(df$referral_phone) | df$referral_phone==""),] %>% select(localisation_region_label,district_name,idp_code, IDP_Site, referral_name,referral_phone,referral_person,uuid)
referall_master <- readxl::read_excel("gis/referall.xlsx")
# spt1<-split(referall,referall$FO)
#
#
# setDT(referall)
#
# Define a reusable function for handling contacts
write_referall_contacts <- function(contact_name, folder_name, spt_data, outputdir, today) {
contact <- spt_data[[contact_name]]
split_contact <- split(contact, contact$regionFO)
purrr::imap(split_contact, ~openxlsx::write.xlsx(.x, paste0(outputdir, "\\", folder_name, "\\referall Contacts\\", .y, today, '.xlsx')))
}
# Apply the function for each contact
write_referall_contacts('Abdikani Kunow_Hassan Abukar', '01_Abdikani Kunow_Hassan Abukar', spt1, outputdir, today)
# Function to process referral contacts and save to Excel
save_referral_contacts <- function(person_name, folder_name) {
person_data <- spt1[[person_name]]
split_data <- split(person_data, person_data$regionFO)
purrr::imap(split_data, ~openxlsx::write.xlsx(.x, paste0(outputdir, "\\", folder_name,
"\\referall Contacts\\", .y, today, '.xlsx')))
}
f_team<- read_excel("input/FOs/Field team work distribution.xlsx")
f_team<- read_excel("input/Field team work distribution.xlsx")
f_team$Locations <-tolower(gsub(" ","_",f_team$Locations))
f_team$`Responsible FO`<-gsub("\\/","_",f_team$`Responsible FO`)
referall$FO <-f_team$`Responsible FO`[match(referall$district_name,f_team$Locations)]
############Refereall contacts#################################################################
##################################adding resposible FOs and splitting##########################
referall <-  df[!(is.na(df$referral_phone) | df$referral_phone==""),] %>%
select(localisation_region_label,district_name,idp_code, IDP_Site, referral_name,referral_phone,referral_person,uuid)
read_excel(fo_base_assingment_str)
# read in the FO/district mapping(we create fo_assigned location when we receive and update )
fo_district_mapping <- read_excel(fo_base_assingment_str) %>%
select(district_for_code, fo_in_charge_for_code) %>%
dplyr::rename("district" = "district_for_code") %>%
mutate_all(tolower)
?setdt
?setDT
